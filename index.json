[{"content":"\u003ch2 id=\"hugo-themes\"\u003eHugo Themes\u003c/h2\u003e\n\u003cp\u003eThis is a blog written to tell the details about my journey of creating a website as part of the AmFOSS Paraveshan task. In this blog, I talk about the things I went through in creating this website. Even though I am new to this Hugo stuff, it felt simple and literally more efficient and faster way to create a static website without spending too much time on HTML, CSS, and maybe JavaScript. I love to do web designing, and this task was in the same page as what I like, so it was not boring to spend time on it; rather, I never noticed the time when making this website. I don\u0026rsquo;t have much time to explain everything, but in this blog I will go through the difficulties, the customization, and basically cover how I made this.\u003c/p\u003e\n\u003ch1 id=\"how-was-my-experience-making-this\"\u003eHow was my experience making this.\u003c/h1\u003e\n\u003cp\u003eMaking this website wasn\u0026rsquo;t that challenging as reading the GitHub of this made me understand what to do. Though I literally enjoyed throughout making this website. I chose the \u0026lsquo;Profile\u0026rsquo; theme because it felt more interesting but minimalistic than the others of the same kind. So, as the first step, I installed Hugo on my computer and then read through the theme GitHub to understand what to do. Then, I spent a little while watching a YouTube video which helped me understand what I really need to do to create a wonderful portfolio website. With the help of the .yaml file in the example site, I got to understand what is what. So, taking that as a reference, I started doing Task 02. It was easy and sometimes confusing. But later, I got the hang of it, and my pace increased, so did my understanding of what I am doing\u003c/p\u003e\n\u003ch1 id=\"customization-part\"\u003eCustomization part\u003c/h1\u003e\n\u003cp\u003eIt was the most fun part as doing it made the website look more beautiful, and what\u0026rsquo;s more beautiful than seeing your handiwork working fine? Well, I read the GitHub repository for the theme, and it explained a lot, and the given example folder .yaml file gives an idea too. I didn\u0026rsquo;t feel any hardship; it was rather easy doing the whole thing.\u003c/p\u003e\n\u003ch1 id=\"problems-i-faced\"\u003eProblems I faced\u003c/h1\u003e\n\u003cp\u003eThe one and only problem I faced was that I forgot to save the file, and later when I saved it in the end, it crashed, and I had to redo it again. That\u0026rsquo;s the biggest lesson I learned in the whole process. It was a bit time-consuming too, but yeah, the end was worth it.\u003c/p\u003e\n\u003ch1 id=\"conclusion\"\u003eConclusion\u003c/h1\u003e\n\u003cp\u003eThis was a new and interesting task for me. I learned about Hugo a lot too. I did the task twice as the first theme I chose wasn\u0026rsquo;t satisfying me in the end, so I preferred to choose a different theme, but I feel it\u0026rsquo;s worth it as looks are a must to have on the website side of things. Overall, it was an interesting task.\u003c/p\u003e\n","description":"A blog post on my experience creating this website","image":"/images/amfoss.png","permalink":"https://sabarixr.github.io/blogs/amfossblog/","title":"Lessgo HUGO"},{"content":"\u003ch2 id=\"arduino\"\u003eArduino\u003c/h2\u003e\n\u003cp\u003e• Arduino IDE is an open-source software, designed by Arduino.cc and mainly used for writing, compiling \u0026amp; uploading code to almost all Arduino Modules.\u003c/p\u003e\n\u003cp\u003e• It is an official Arduino software, making code compilation too easy that even a common person with no prior technical knowledge\u003c/p\u003e\n\u003cp\u003e• It is available for all operating systems i.e. MAC, Windows, Linux and runs on the Java Platform that comes with inbuilt functions and commands that play a vital role in debugging, editing and compiling the code.\u003c/p\u003e\n\u003cp\u003e• A range of Arduino modules available including Arduino Uno, Arduino Mega, Arduino Leonardo, Arduino Micro and many more.can get their feet wet with the learning process.\u003c/p\u003e\n\u003cp\u003e• Each of them contains a microcontroller on the board that is actually programmed and accepts the information in the form of code.\n• The main code, also known as a sketch, created on the IDE platform will ultimately generate a Hex File which is then transferred and uploaded in the controller on the board.\u003c/p\u003e\n\u003cp\u003e• The IDE environment mainly contains two basic parts: Editor and Compiler where former is used for writing the required code and later is used for compiling and uploading the code into the given Arduino Module.\u003c/p\u003e\n\u003cp\u003e• This environment supports both C and C++ languages.\u003c/p\u003e\n\u003ch2 id=\"how-to-download-arduino-ide\"\u003eHow to Download Arduino IDE\u003c/h2\u003e\n\u003cp\u003eYou can download the Software from Arduino main website. As I said earlier, the software is available for common operating systems like Linux, Windows, and MAX, so make sure you are downloading the correct software version that is easily compatible with your operating system.\nIf you aim to download the Windows app version, make sure you have Windows 8.1 or Windows 10, as the app version is not compatible with Windows 7 or older versions of this operating system.\nYou can download the latest version of Arduino IDE for Windows (Non-Admin standalone version), by clicking below button:\nDownload Arduino IDE\u003c/p\u003e\n\u003cp\u003eThe IDE environment is mainly distributed into three sections\nMenu Bar\nText Editor\nOutput Pane\u003c/p\u003e\n\u003cp\u003eEdit - Used for copying and pasting the code with further modification for font\nSketch - For compiling and programming\nTools - Mainly used for testing projects. The Programmer section in this panel is used for burning a bootloader to the new microcontroller.\nHelp - In case you are feeling skeptical about software, complete help is available from getting started to troubleshooting.\nThe checkmark appearing in the circular button is used to verify the code. Click this once you have written your code.\nThe arrow key will upload and transfer the required code to the Arduino board.\nThe dotted paper is used for creating a new file.\nThe upward arrow is reserved for opening an existing Arduino project.\nThe downward arrow is used to save the current running code.\nThe button appearing on the top right corner is a Serial Monitor - A separate pop-up window that acts as an independent terminal and plays a vital role in sending and receiving the Serial Data. You can also go to the Tools panel and select Serial Monitor, or pressing Ctrl+Shift+M all at once will open it instantly. The Serial Monitor will actually help to debug the written Sketches where you can get a hold of how your program is operating. Your Arduino Module should be connected to your computer by USB cable in order to activate the Serial Monitor.\nYou need to select the baud rate of the Arduino Board you are using right now. For my Arduino Uno Baud Rate is 9600, as you write the following code and click the Serial Monitor\nThe main screen below the Menu bard is known as a simple text editor used for writing the required code.\u003c/p\u003e\n\u003cp\u003eThe bottom of the main screen is described as an Output Pane that mainly highlights the compilation status of the running code: the memory used by the code, and errors that occurred in the program. You need to fix those errors before you intend to upload the hex file into your Arduino Module.\u003c/p\u003e\n\u003ch2 id=\"arduino-libraries\"\u003eArduino Libraries\u003c/h2\u003e\n\u003cp\u003eLibraries are very useful for adding extra functionality into the Arduino Module.\nThere is a list of libraries you can check by clicking the Sketch button in the menu bar and going to Include Library.\u003c/p\u003e\n\u003cp\u003eAs you click the Include Library and Add the respective library it will be on the top of the sketch with a #include sign. Suppose, I Include the EEPROM library, it will appear on the text editor as\u003c/p\u003e\n\u003cp\u003e#include \u0026lt;EEPROM.h\u0026gt;\nMost of the libraries are preinstalled and come with the Arduino software. However, you can also download them from external sources.Making Pins Input Or Output\nMaking Pins Input Or Output\nMAKING PINS INPUT OR OUTPUT\nMaking Pins Input Or Output\nThe digitalRead and digitalWrite commands are used for addressing and making the Arduino pins as an input and output respectively.\nThese commands are text sensitive i.e. you need to write them down the exact way they are given like digitalWrite starting with small \u0026ldquo;d\u0026rdquo; and write with capital \u0026ldquo;W\u0026rdquo;. Writing it down with Digitalwrite or digitalwrite won\u0026rsquo;t be calling or addressing any function.\nHOW TO SELECT THE BOARD\nIn order to upload the sketch, you need to select the relevant board you are using and the ports for that operating system.\nAs you click the Tools on the menu, it will open like the figure below:\u003c/p\u003e\n\u003cp\u003eJust go to the \u0026ldquo;Board\u0026rdquo; section and select the board you aim to work on. Similarly, COM1, COM2, COM4, COM5, COM7 or higher are reserved for the serial and USB board. You can look for the USB serial device in the ports section of the Windows Device Manager.\nThe following figure shows the COM4 that I have used for my project, indicating the Arduino Uno with the COM4 port at the right bottom corner of the screen.\u003c/p\u003e\n\u003cp\u003eAfter correct selection of both Board and Serial Port, click the verify and then upload button appearing in the upper left corner of the six-button section or you can go to the Sketch section and press verify/compile and then upload.\nThe sketch is written in the text editor and is then saved with the file extension .ino.\nIt is important to note that the recent Arduino Modules will reset automatically as you compile and press the upload button the IDE software, however, the older versions may require the physical reset on the board.\nOnce you upload the code, TX and RX LEDs will blink on the board, indicating the desired program is running successfully.\u003c/p\u003e\n\u003ch2 id=\"arduino-bootloader\"\u003eArduino Bootloader\u003c/h2\u003e\n\u003cp\u003eAs you go to the Tools section, you will find a bootloader at the end.\nIt is very helpful to burn the code directly into the controller, setting you free from buying the external burner to burn the required code.\u003c/p\u003e\n\u003cp\u003eWhen you buy the new Arduino Module, the bootloader is already installed inside the controller. However, if you intend to buy a controller and put it in the Arduino module, you need to burn the bootloader again inside the controller by going to the Tools section and selecting the burn bootloader.\u003c/p\u003e\n\u003cp\u003eThat\u0026rsquo;s all . I hope I have given you everything you needed to know about Arduino IDE.\u003c/p\u003e\n","description":"Introduction to Arduino IDE where IDE stands for Integrated Development Environment - An official software introduced by Arduino.cc, that is mainly used for writing, compiling and uploading the code in almost all Arduino modules/boards. Arduino IDE is open-source software and is easily available to download \u0026 install  from Arduino's Official Site","image":"/images/blog2.jpg","permalink":"https://sabarixr.github.io/blogs/indroductionarduino/","title":"Arduino IDE"}]